from dataclasses import dataclass, asdict, field
from typing import List, Dict
import json

def allArgsPresent(obj: object, args: List[str]) -> bool:
    """ 
        this method should be reassigned from the __init__.py file
    """
    raise NotImplementedError("this shouldnt happen")


@dataclass
class Product:
    meli_id: str
    name: str
    site_id: str
    category_id: str
    initial_price: int
    secure_thumbnail: str
    condition: str
    sku: str
    status: str
    competes_with: str # points to another product, if competes_with="", means its one of the customers products, if its not empty, means its a competitor and the value is the sku of a customer product
    meli_url: str
    domain_id: str
    seller_id: str
    product_id: str
    type: str
    
    @staticmethod
    def recreate(**kwargs) -> "Product":
        assert allArgsPresent(Product, kwargs), f"not all args are present: {kwargs}"
        
        return Product(**kwargs)

    @staticmethod
    def create(product_data: Dict) -> "Product":
        return Product.recreate(**product_data)
    
    @staticmethod
    def fromItemData(item_data: Dict, sku: str, product_type:str,is_competitor:bool=True) -> "Product":
        product_data = {
            "meli_id": item_data["id"],
            "name": item_data.get("title"), 
            "site_id": item_data["site_id"],
            "category_id": item_data["category_id"],
            "initial_price": item_data["base_price"],
            "secure_thumbnail": item_data["secure_thumbnail"],
            "condition": item_data["condition"],
            "sku": sku,
            "status": item_data["status"],
            "competes_with": sku if is_competitor else "",
            "meli_url": item_data["permalink"],
            "domain_id": item_data["domain_id"],
            "seller_id": item_data["seller_id"],
            "type": product_type,
            "product_id": None # product_id is generated by the database, this method is used to create a new product
        }
        
        return Product.create(product_data)
    
    def toDict(self) -> Dict:
        return asdict(self)
    
    def __getitem__(self, key) -> str|None:
        if not hasattr(self, key):
            return None
        return getattr(self, key)
    
@dataclass
class OurProduct:
    product: Product
    competitors: List[Product] = field(default_factory=list)
    
    @staticmethod
    def recreate(**kwargs) -> "OurProduct":
        assert allArgsPresent(OurProduct, kwargs), f"not all args are present: {kwargs}"
        
        return OurProduct(**kwargs)
    
    @staticmethod
    def create(our_product_data: Dict) -> "OurProduct":
        return OurProduct.recreate(**our_product_data)
    
    def toDict(self) -> Dict:
        return asdict(self)
    
@dataclass
class CustomQuery:
    keyword: str
    sku: str
    meli_id: str
    
    @staticmethod
    def recreate(**kwargs) -> "CustomQuery":
        assert allArgsPresent(CustomQuery, kwargs), f"not all args are present: {kwargs}"
        
        return CustomQuery(**kwargs)
    
    @staticmethod
    def create(custom_query_data: Dict) -> "CustomQuery":
        return CustomQuery.recreate(**custom_query_data)
    
    def toDict(self) -> Dict:
        return asdict(self)
    