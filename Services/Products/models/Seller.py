from dataclasses import dataclass, asdict
from typing import List, Dict
import json

def allArgsPresent(obj: object, args: List[str]) -> bool:
    """ 
        this method should be reassigned from the __init__.py file
    """
    raise NotImplementedError("this shouldnt happen")


@dataclass
class Seller:
    seller_id: int
    nickname: str
    meli_profile_link: str
    added_date: str
    meli_registration_date: str
    
    @staticmethod
    def recreate(**kwargs) -> "Seller":
        assert allArgsPresent(Seller, kwargs), f"not all args are present: {kwargs}"
        
        return Seller(**kwargs)
    
    @staticmethod
    def create(seller_data: Dict) -> "Seller":
        return Seller.recreate(**seller_data)
    
    @staticmethod
    def fromMeliData(meli_data: Dict) -> "Seller":
        seller_data = {
            "seller_id": meli_data["id"],
            "nickname": meli_data["nickname"],
            "meli_profile_link": meli_data["permalink"],
            "added_date": None, # this is generated by the database
            "meli_registration_date": meli_data["registration_date"]
        }
        
        return Seller.create(seller_data)
    
@dataclass
class SellerReputation:
    id: int
    power_seller_status: str
    recorded_date: str
    cancelled_transactions: int
    total_transactions: int
    completed_transactions: int
    positive_ratings: float
    negative_ratings: float
    neutral_ratings: float
    level: str
    seller_id: int
    
    @staticmethod
    def recreate(**kwargs) -> "SellerReputation":
        assert allArgsPresent(SellerReputation, kwargs), f"not all args are present: {kwargs}"
        
        return SellerReputation(**kwargs)
    
    @staticmethod
    def create(reputation_data: Dict) -> "SellerReputation":
        return SellerReputation.recreate(**reputation_data)
    
    @staticmethod
    def fromMeliData(meli_data: Dict, seller_id: int) -> "SellerReputation":
        reputation_data = {
            "id": None, # this is generated by the database, its an autoincremental
            "power_seller_status": meli_data["power_seller_status"],
            "recorded_date": None, # this is generated by the database
            "cancelled_transactions": meli_data["transactions"]["canceled"],
            "total_transactions": meli_data["transactions"]["total"],
            "completed_transactions": meli_data["transactions"]["completed"],
            "positive_ratings": meli_data["transactions"]["ratings"]["positive"],
            "negative_ratings": meli_data["transactions"]["ratings"]["negative"],
            "neutral_ratings": meli_data["transactions"]["ratings"]["neutral"],
            "level": meli_data["level_id"],
            "seller_id": seller_id
        }
        
        return SellerReputation.create(reputation_data)